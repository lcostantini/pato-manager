#!/usr/bin/env ruby

require 'commander/import'
require 'httparty'
require 'json'
require './models/response_decorator'

URL = 'https://pato-manager.herokuapp.com/'

def current_token
  begin
    @token ||= open(File.expand_path("~/.pato-manager")).read.chomp
  rescue Errno::ENOENT => e
    puts <<-MESSAGE

Error: the file #{ e.message.split("- ").last } doesn't exists.
Also the file needs to contain the GitHub token.
Try to run the script to create the file and get the token or for help.

    MESSAGE
  end
end

def json_response response
  JSON.parse response, symbolize_names: true
end

class Patodo
  include HTTParty
  base_uri URL
  headers 'Content-Type' => 'application/json'
  headers 'User-Token' => current_token
end

program :name, 'Pato Manager'
program :version, '1.0.0'
program :description, 'A terminal application to keep tracking of your todo lists.'
program :help, 'Author', 'Costantini Leandro <costantinileandro1@gmail.com'

default_command :todo

command :todo do |c|
  c.description = 'List all the todo tasks.'
  c.option '--d', 'Show description column in table.'
  c.option '--da', 'Show date column in table.'
  c.action do |_, options|
    show = { description: options.d, date: options.da }.reject { |_, v| v.nil? }
    response = Patodo.get "/tasks"
    puts ResponseDecorator.new.decorate_table json_response(response), show
  end
end

command :new do |c|
  c.syntax = 'new options \'string\''
  c.description = 'Create a new todo task.'
  c.option '--d STRING', String, 'Adds a description for a todo task.'
  c.option '--c STRING', String, 'Add a category for a todo task.'
  c.action do |args, options|
    name = args.join(' ') || ask("Name: ")
    category = options.c || ask("Category: ")
    params = { task: { name: name, description: options.d, category: category } }
    response = Patodo.post "/tasks", body: params.to_json
    say "# OK" if response.code == 201
  end
end

command :all do |c|
  c.description = 'List all the tasks.'
  c.action do
    response = Patodo.get "/tasks/all"
    puts ResponseDecorator.new.decorate_table json_response(response)
  end
end

command :update do |c|
  c.syntax = 'update id options \'string\''
  c.description = 'Update a task.'
  c.option '--n STRING', String, 'Adds a new name for a task'
  c.option '--d STRING', String, 'Adds a new description for a task'
  c.option '--c STRING', String, 'Add a category for a todo task.'
  c.action do |args, options|
    id = args.join(' ')
    params = { task: { name: options.n, description: options.d, category: options.c } }
    response = Patodo.put "/tasks/#{ id }", body: params.to_json
    say "# OK" if response.code == 200
  end
end

command :done do |c|
  c.syntax = 'done id'
  c.description = 'Mark a todo task as done.'
  c.action do |args|
    id = args.join(' ')
    response = Patodo.put "/tasks/#{ id }/done"
    say "# OK" if response.code == 200
  end
end

command :undone do |c|
  c.syntax = 'undone id'
  c.description = 'Mark a task as undone.'
  c.action do |args|
    id = args.join(' ')
    response = Patodo.put "/tasks/#{ id }/undone"
    say "# OK" if response.code == 200
  end
end

# TODO: mark a task as CANCEL
#command :cancel do |c|
#  c.syntax = 'cancel id'
#  c.description = 'Mark a task as canceled.'
#  c.action do |args|
#    id = args.join(' ')
#    response = Patodo.put "/tasks/#{ id }/cancel"
#    say "# OK" if response.code == 200
#  end
#end

command :delete do |c|
  c.syntax = 'delete id'
  c.description = 'Delete a task.'
  c.action do |args|
    id = args.join(' ')
    response = Patodo.delete "/tasks/#{ id }"
    say "# OK" if response.code == 200
  end
end

# TODO: filtrar tambien por done (--d) y undone (--t).
command :category do |c|
  c.syntax = 'category \'string\''
  c.description = 'Find all tasks for a specific category.'
  c.action do |args|
    category = args.join(' ') || ask("Category: ")
    response = Patodo.get "/tasks/category?topic=#{ category }"
    puts ResponseDecorator.new.decorate_table json_response(response)
  end
end

command :token do |c|
  c.syntax = 'token \'string\''
  c.description = <<-README
HOW IT WORKS:
To know the user that is using the app or create a new one,
Pato Manager needs to know your GitHub email[*], for that,
the script ask your GitHub username and try to create or read
a public token .- **only gets your public profile details** -.

The GitHub API ask for your password, then the script capture
the response from the API and save in pato-manager file.
You can see your token in $HOME/.pato-manager
and in GitHub https://github.com/settings/tokens.

[*]: Because it's easier than having to remember another login account.
  README
  c.action do |args|
    username = args.first || ask('GitHub username: ')
    response = `curl "https://api.github.com/authorizations" -u #{ username } --data '{"scopes": ["user:email"], "note": "pato-manager"}'`
    puts
    puts json_response(response)
    if json_response(response)[:message]
      puts 'You can run the \'token_help\' command to get more info.'
    else
      open(File.expand_path("~/.pato-manager"), 'a+') do |f|
        f.write json_response(response)[:token]
      end
      puts 'Done! The token was saved.'
    end
  end
end

command :manually do |c|
  c.syntax = 'manually'
  c.description = 'This command help to create a token manually.'
  c.action do |_|
    puts <<-README
MANUALLY:
To get the token manually, run the commands at the bottom.
In the curl command replacing the USERNAME for your GitHub username,
then execute the second command that creates a hidden file called pato-manager.
Finally copy the token provided by the Github API and save it in the file.

curl "https://api.github.com/authorizations" -u USERNAME --data '{"scopes": ["user:email"], "note": "pato-manager"}'
touch ~/.pato-manager
    README
  end
end

command :token_help do |c|
  c.syntax = 'token_help'
  c.description = 'This command help to solve some error messages given from the GitHub API.'
  c.action do |_|
    puts <<-HELP
HELP:
* Validation Failed: if you get this error is because you already have a token.
You don't need to create a token, check if the file contains the token and you
are ready to use.
If the file doesn't contain the token or the file is missing you can delete the
token in your GitHub settings panel and run the command 'token' or 'manually'.
    HELP
  end
end
