#!/usr/bin/env ruby

require './config/application'

program :name, 'Pato-Manager'
program :version, '1.0.0'
program :description, 'A terminal application to keep tracking of your todo lists.'

default_command :todo

command :todo do |c|
  c.description = 'List all the todo tasks.'
  c.action do
    response = HTTParty.get "#{ ENV['URL'] }/tasks"
    puts ResponseDecorator.new.decorate_table response
  end
end

command :new do |c|
  c.syntax = 'new [options]'
  c.description = 'Create a new todo task.'
  c.option '--d STRING', String, 'Adds a description for a todo task.'
  c.option '--c STRING', String, 'Add a category for a todo task.'
  c.action do |args, options|
    name = args.join(' ') || ask("Name: ")
    category = options.c || ask("Category: ")
    params = { task: { name: name, description: options.d, category: category } }
    response = HTTParty.post "#{ ENV['URL'] }/tasks", headers: { 'Content-Type' => 'application/json' }, body: params.to_json
    say "# OK" if response.code == 201
  end
end

command :all do |c|
  c.description = 'List all the tasks.'
  c.action do
    response = HTTParty.get "#{ ENV['URL'] }/tasks/all"
    puts ResponseDecorator.new.decorate_table response
  end
end

command :update do |c|
  c.syntax = 'update [options]'
  c.description = 'Update a task.'
  c.option '--n STRING', String, 'Adds a new name for a task'
  c.option '--d STRING', String, 'Adds a new description for a task'
  c.option '--c STRING', String, 'Add a category for a todo task.'
  c.action do |args, options|
    id = args.join(' ')
    params = { task: { name: options.n, description: options.d, category: options.c } }
    response = HTTParty.put "#{ ENV['URL'] }/tasks/#{ id }", headers: { 'Content-Type' => 'application/json' }, body: params.to_json
    say "# OK" if response.code == 200
  end
end

command :done do |c|
  c.description = 'Mark a todo task as done.'
  c.action do |args|
    id = args.join(' ')
    response = HTTParty.put "#{ ENV['URL'] }/tasks/#{ id }/done"
    say "# OK" if response.code == 200
  end
end

command :undone do |c|
  c.description = 'Mark a task as undone.'
  c.action do |args|
    id = args.join(' ')
    response = HTTParty.put "#{ ENV['URL'] }/tasks/#{ id }/undone"
    say "# OK" if response.code == 200
  end
end

command :delete do |c|
  c.description = 'Delete a task.'
  c.action do |args|
    id = args.join(' ')
    response = HTTParty.delete "#{ ENV['URL'] }/tasks/#{ id }"
    say "# OK" if response.code == 200
  end
end

command :category do |c|
  c.description = 'Find all tasks for a specific category.'
  c.action do |args|
    category = args.join(' ') || ask("Category: ")
    response = HTTParty.get "#{ ENV['URL'] }/tasks/category?topic=#{ category }"
    puts ResponseDecorator.new.decorate_table response
  end
end
